// pages/api/login.ts
import { NextApiHandler } from 'next';
import lnurl from 'lnurl';
import { SignJWT } from 'jose';
import { isValidK1, storePair, JWT_SECRET } from '../../utils/utils';

const login: NextApiHandler = async (req, res) => {
  try {
    const { tag, k1, sig, key } = req.query;

    if (
      typeof k1 !== 'string' ||
      typeof sig !== 'string' ||
      typeof key !== 'string'
    ) {
      throw new Error('Invalid query parameters');
    }

    if (!lnurl.verifyAuthorizationSignature(sig, k1, key)) {
      throw new Error('Invalid signature');
    }

    if (!isValidK1(k1)) {
      throw new Error("This k1 isn't generated by us");
    }

    const hour = 3600000;
    const maxAge = 30 * 24 * hour;

    const jwt = await new SignJWT({ pubKey: key })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime(maxAge)
      //TODO: Set audience, issuer
      .sign(Buffer.from(JWT_SECRET, 'utf-8'));

    await storePair(k1, jwt);

    res.status(200).json({ status: 'OK' });
  } catch (error: any) {
    res.status(400).json({
      status: 'ERROR',
      reason: 'Something wrong happened...',
      message: error.message,
    });
  }
};

export default login;
